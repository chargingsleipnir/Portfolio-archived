precision mediump float;

varying vec4 v_Pos;
varying vec3 v_TrfmNorm;
varying vec3 v_Col;
varying vec2 v_TexCoord;

uniform vec3 u_Tint;
uniform vec3 u_DiffColWeight;
uniform vec3 u_SpecCol;
uniform float u_SpecInt;
//uniform float u_Specular_Hardness;
//uniform vec3 u_Mirror_Color;
//uniform float u_Mirror_Distance;
//uniform float u_Mirror_Reflectivity;
//uniform float u_Shading_Ambient;
//uniform float u_Shading_Emit;
//uniform float u_Shading_Translucency;
uniform float u_Alpha;
//uniform float u_Darkness;

uniform float u_AmbBright;
uniform float u_DirBright;
uniform vec3 u_DirDir;
uniform float u_PntBright;
uniform vec3 u_PntPos;

uniform sampler2D u_Sampler;

void main()
{
	vec3 lightWeighting;
	vec4 texColour = texture2D(u_Sampler, vec2(v_TexCoord.s, v_TexCoord.t));

	// I should probably include a drop-off value, squared principle of light decay?
	if(u_AmbBright == 0.0 && u_DirBright == 0.0 && u_PntBright == 0.0)
        lightWeighting = vec3(1.0, 1.0, 1.0);
    else
    {
		float directional_Weighting = 0.0;
		float point_Weighting = 0.0;

		vec3 specularColorWeighting = vec3(0.0, 0.0, 0.0);
		float specularBrightness = 0.0;

		vec3 ambientColor = u_DiffColWeight * u_AmbBright;
		vec3 directionalColor = vec3(0.0, 0.0, 0.0);
		vec3 pointColor = vec3(0.0, 0.0, 0.0);

		vec3 eyeDirection = normalize(-v_Pos.xyz);
		vec3 reflectionDirection = vec3(0.0, 0.0, 0.0);
        vec3 normal = normalize(v_TrfmNorm);

		if(u_DirBright > 0.0)
		{
            reflectionDirection = reflect(-u_DirDir, normal);
			specularBrightness = pow(max(dot(reflectionDirection, eyeDirection), 0.0), u_SpecInt);
            specularColorWeighting = u_SpecCol * specularBrightness;

			directional_Weighting = max(dot(normal, u_DirDir), 0.0) * u_DirBright;

			directionalColor = (u_DiffColWeight * directional_Weighting) +
								(specularColorWeighting * directional_Weighting);
		}
		if(u_PntBright > 0.0)
		{
			vec3 light_Point_Direction = normalize(u_PntPos - v_Pos.xyz);
			reflectionDirection = reflect(-light_Point_Direction, normal);
			specularBrightness = pow(max(dot(reflectionDirection, eyeDirection), 0.0), u_SpecInt);
            specularColorWeighting = u_SpecCol * specularBrightness;

			point_Weighting = max(dot(normal, light_Point_Direction), 0.0) * u_PntBright;

			pointColor = (u_DiffColWeight * point_Weighting) +
						  (specularColorWeighting * point_Weighting);
		}

		lightWeighting = ambientColor + directionalColor + pointColor;
	}

	/*
	if (texColour.a == 0.0)
		texColour = vec4(1.0, 1.0, 1.0, 1.0);
	gl_FragColor = texColour * vec4(v_Col.rgb * v_LightWeighting, v_Col.a);
	*/

	/*
	if (texColour.a == 0.0)
		texColour.rgb = vec3(1.0, 1.0, 1.0);
	gl_FragColor = vec4(texColour.rgb * v_Col * lightWeighting, max(texColour.a, u_Alpha));
	*/

	if (texColour.a == 0.0)
		texColour.rgb = vec3(1.0, 1.0, 1.0);
	gl_FragColor = vec4((texColour.rgb * v_Col * lightWeighting) + u_Tint, u_Alpha);

	/*
	if (texColour.a == 0.0)
		gl_FragColor = vec4(v_Col.rgb * v_LightWeighting, v_Col.a);
	else
		gl_FragColor = texColour;
	*/

	//gl_FragColor = mix(texColour, v_Col, 0.5);
}