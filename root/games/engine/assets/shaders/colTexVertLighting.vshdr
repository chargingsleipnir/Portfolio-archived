attribute vec3 a_Pos;
attribute vec3 a_Norm;
attribute vec3 a_Col;
attribute vec2 a_TexCoord;

uniform mat4 u_MtxM;
uniform mat4 u_MtxVP;
uniform mat3 u_MtxNorm;

uniform vec3 u_DiffColWeight;
uniform vec3 u_SpecCol;
uniform float u_SpecInt;
//uniform float u_Specular_Hardness;
//uniform vec3 u_Mirror_Color;
//uniform float u_Mirror_Distance;
//uniform float u_Mirror_Reflectivity;
//uniform float u_Shading_Ambient;
//uniform float u_Shading_Emit;
//uniform float u_Shading_Translucency;
uniform float u_Alpha;
//uniform float u_Darkness;

uniform float u_AmbBright;
uniform float u_DirBright;
uniform vec3 u_DirDir;
uniform float u_PntBright;
uniform vec3 u_PntPos;

varying vec3 v_LightWeighting;
varying vec3 v_Col;
varying vec2 v_TexCoord;

void main()
{
	gl_PointSize = 4.0;
	vec4 modelPosition = u_MtxM * vec4(a_Pos, 1.0);
	gl_Position = u_MtxVP * modelPosition;

	float directional_Weighting = 0.0;
	float point_Weighting = 0.0;

	vec3 specularColorWeighting = vec3(0.0, 0.0, 0.0);
	float specularBrightness = 0.0;

	vec3 ambientColor = u_DiffColWeight * u_AmbBright;
	vec3 directionalColor = vec3(0.0, 0.0, 0.0);
	vec3 pointColor = vec3(0.0, 0.0, 0.0);

	vec3 eyeDirection = normalize(-modelPosition.xyz);
	vec3 reflectionDirection = vec3(0.0, 0.0, 0.0);
	vec3 trfmNorm = u_MtxNorm * a_Norm;

	if(u_DirBright > 0.0)
	{
        reflectionDirection = reflect(-u_DirDir, trfmNorm);
		specularBrightness = pow(max(dot(reflectionDirection, eyeDirection), 0.0), u_SpecInt);
        specularColorWeighting = u_SpecCol * specularBrightness;

		directional_Weighting = max(dot(trfmNorm, u_DirDir), 0.0) * u_DirBright;

		directionalColor = (u_DiffColWeight * directional_Weighting) +
							(specularColorWeighting * directional_Weighting);
	}
	if(u_PntBright > 0.0)
	{
		vec3 light_Point_Direction = normalize(u_PntPos - modelPosition.xyz);
		reflectionDirection = reflect(-light_Point_Direction, trfmNorm);
		specularBrightness = pow(max(dot(reflectionDirection, eyeDirection), 0.0), u_SpecInt);
        specularColorWeighting = u_SpecCol * specularBrightness;

		point_Weighting = max(dot(trfmNorm, light_Point_Direction), 0.0) * u_PntBright;

		pointColor = (u_DiffColWeight * point_Weighting) +
						(specularColorWeighting * point_Weighting);
	}

	v_LightWeighting = ambientColor + directionalColor + pointColor;
	v_Col = a_Col;
	v_TexCoord = a_TexCoord;
}