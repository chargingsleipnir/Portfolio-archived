precision mediump float;

varying vec4 v_Pos;
varying vec3 v_TrfmNorm;

uniform vec3 u_Tint;
uniform vec3 u_DiffColWeight;
uniform vec3 u_SpecCol;
uniform float u_SpecInt;
//uniform float u_Specular_Hardness;
//uniform vec3 u_Mirror_Color;
//uniform float u_Mirror_Distance;
//uniform float u_Mirror_Reflectivity;
//uniform float u_Shading_Ambient;
//uniform float u_Shading_Emit;
//uniform float u_Shading_Translucency;
uniform float u_Alpha;
//uniform float u_Darkness;

uniform float u_AmbBright;
uniform float u_DirBright;
uniform vec3 u_DirDir;
uniform float u_PntBright;
uniform vec3 u_PntPos;

void main()
{
	vec3 lightWeighting;

	// I should probably include a drop-off value, squared principle of light decay?

	float directional_Weighting = 0.0;
	float point_Weighting = 0.0;

	vec3 specularColorWeighting = vec3(0.0, 0.0, 0.0);
	float specularBrightness = 0.0;

	vec3 ambientColor = u_DiffColWeight * u_AmbBright;
	vec3 directionalColor = vec3(0.0, 0.0, 0.0);
	vec3 pointColor = vec3(0.0, 0.0, 0.0);

	vec3 eyeDirection = normalize(-v_Pos.xyz);
	vec3 reflectionDirection = vec3(0.0, 0.0, 0.0);
    vec3 normal = normalize(v_TrfmNorm);

	if(u_DirBright > 0.0)
	{
        reflectionDirection = reflect(-u_DirDir, normal);
		specularBrightness = pow(max(dot(reflectionDirection, eyeDirection), 0.0), u_SpecInt);
        specularColorWeighting = u_SpecCol * specularBrightness;

		directional_Weighting = max(dot(normal, u_DirDir), 0.0) * u_DirBright;

		directionalColor = (u_DiffColWeight * directional_Weighting) +
							(specularColorWeighting * directional_Weighting);
	}
	if(u_PntBright > 0.0)
	{
		vec3 light_Point_Direction = normalize(u_PntPos - v_Pos.xyz);
		reflectionDirection = reflect(-light_Point_Direction, normal);
		specularBrightness = pow(max(dot(reflectionDirection, eyeDirection), 0.0), u_SpecInt);
        specularColorWeighting = u_SpecCol * specularBrightness;

		point_Weighting = max(dot(normal, light_Point_Direction), 0.0) * u_PntBright;

		pointColor = (u_DiffColWeight * point_Weighting) +
						(specularColorWeighting * point_Weighting);
	}

	lightWeighting = ambientColor + directionalColor + pointColor;

	gl_FragColor = vec4(lightWeighting + u_Tint, u_Alpha);
}